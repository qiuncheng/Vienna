// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class UIFont;
@class UIView;

@interface UIImage (SWIFT_EXTENSION(ImageHelper))
/**
  A singleton shared NSURL cache used for images from URL
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSCache<id, id> * _Null_unspecified shared;)
+ (NSCache<id, id> * _Null_unspecified)shared;
/**
  Creates a new solid color image.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param color The color to fill the image with.

  \param size Image size (defaults: 10x10)

*/
- (nullable instancetype)initWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
/**
  Creates a gradient color image.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param gradientColors An array of colors to use for the gradient.

  \param size Image size (defaults: 10x10)

*/
- (nullable instancetype)initWithGradientColors:(NSArray<UIColor *> * _Nonnull)gradientColors size:(CGSize)size locations:(NSArray<NSNumber *> * _Nonnull)locations;
/**
  Applies gradient color overlay to an image.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param gradientColors An array of colors to use for the gradient.

  \param locations An array of locations to use for the gradient.

  \param blendMode The blending type to use.

*/
- (UIImage * _Nonnull)applyWithGradientColors:(NSArray<UIColor *> * _Nonnull)gradientColors locations:(NSArray<NSNumber *> * _Nonnull)locations blendMode:(CGBlendMode)blendMode;
/**
  Creates a text label image.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param text The text to use in the label.

  \param font The font (default: System font of size 18)

  \param color The text color (default: White)

  \param backgroundColor The background color (default:Gray).

  \param size Image size (default: 10x10)

  \param offset Center offset (default: 0x0)

*/
- (nullable instancetype)initWithText:(NSString * _Nonnull)text font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color backgroundColor:(UIColor * _Nonnull)backgroundColor size:(CGSize)size offset:(CGPoint)offset;
/**
  Creates an image from a UIView.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param fromView The source view.

*/
- (nullable instancetype)initFromView:(UIView * _Nonnull)view;
/**
  Creates a radial gradient.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param startColor The start color

  \param endColor The end color

  \param radialGradientCenter The gradient center (default:0.5,0.5).

  \param radius Radius size (default: 0.5)

  \param size Image size (default: 100x100)

*/
- (nullable instancetype)initWithStartColor:(UIColor * _Nonnull)startColor endColor:(UIColor * _Nonnull)endColor radialGradientCenter:(CGPoint)radialGradientCenter radius:(float)radius size:(CGSize)size;
/**
  Returns true if the image has an alpha layer.
*/
@property (nonatomic, readonly) BOOL hasAlpha;
/**
  Returns a copy of the given image, adding an alpha channel if it doesnâ€™t already have one.
*/
- (UIImage * _Nullable)applyAlpha;
/**
  Returns a copy of the image with a transparent border of the given size added around its edges. i.e. For rotating an image without getting jagged edges.
  <ul>
    <li>
      Returns A new image.
    </li>
  </ul>
  \param padding The padding amount.

*/
- (UIImage * _Nullable)applyWithPadding:(CGFloat)padding;
/**
  Creates a cropped copy of an image.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param bounds The bounds of the rectangle inside the image.

*/
- (UIImage * _Nullable)cropWithBounds:(CGRect)bounds;
- (UIImage * _Nullable)cropToSquare;
/**
  Creates a new image with rounded corners.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param cornerRadius The corner radius.

*/
- (UIImage * _Nullable)roundCornersWithCornerRadius:(CGFloat)cornerRadius;
/**
  Creates a new image with rounded corners and border.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param cornerRadius The corner radius.

  \param border The size of the border.

  \param color The color of the border.

*/
- (UIImage * _Nullable)roundCornersWithCornerRadius:(CGFloat)cornerRadius border:(CGFloat)border color:(UIColor * _Nonnull)color;
/**
  Creates a new circle image.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
*/
- (UIImage * _Nullable)roundCornersToCircle;
/**
  Creates a new circle image with a border.
  <ul>
    <li>
      Returns UIImage?
    </li>
  </ul>
  \param border CGFloat The size of the border.

  \param color UIColor The color of the border.

*/
- (UIImage * _Nullable)roundCornersToCircleWithBorder:(CGFloat)border color:(UIColor * _Nonnull)color;
/**
  Creates a new image with a border.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param border The size of the border.

  \param color The color of the border.

*/
- (UIImage * _Nullable)applyWithBorder:(CGFloat)border color:(UIColor * _Nonnull)color;
/**
  Applies a light blur effect to the image
  <ul>
    <li>
      Returns New image or nil
    </li>
  </ul>
*/
- (UIImage * _Nullable)applyLightEffect;
/**
  Applies a extra light blur effect to the image
  <ul>
    <li>
      Returns New image or nil
    </li>
  </ul>
*/
- (UIImage * _Nullable)applyExtraLightEffect;
/**
  Applies a dark blur effect to the image
  <ul>
    <li>
      Returns New image or nil
    </li>
  </ul>
*/
- (UIImage * _Nullable)applyDarkEffect;
/**
  Applies a color tint to an image
  <ul>
    <li>
      Returns New image or nil
    </li>
  </ul>
  \param color The tint color

*/
- (UIImage * _Nullable)applyTintEffectWithTintColor:(UIColor * _Nonnull)tintColor;
/**
  Applies a blur to an image based on the specified radius, tint color saturation and mask image
  <ul>
    <li>
      Returns New image or nil
    </li>
  </ul>
  \param blurRadius The radius of the blur.

  \param tintColor The optional tint color.

  \param saturationDeltaFactor The detla for saturation.

  \param maskImage The optional image for masking.

*/
- (UIImage * _Nullable)applyBlurWithRadius:(CGFloat)blurRadius tintColor:(UIColor * _Nullable)tintColor saturationDeltaFactor:(CGFloat)saturationDeltaFactor maskImage:(UIImage * _Nullable)maskImage;
/**
  Creates a new image from a URL with optional caching. If cached, the cached image is returned. Otherwise, a place holder is used until the image from web is returned by the closure.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param url The image URL.

  \param placeholder The placeholder image.

  \param shouldCacheImage Weather or not we should cache the NSURL response (default: true)

  \param closure Returns the image from the web the first time is fetched.

*/
+ (UIImage * _Nullable)imageFromURL:(NSString * _Nonnull)url placeholder:(UIImage * _Nonnull)placeholder shouldCacheImage:(BOOL)shouldCacheImage closure:(void (^ _Nonnull)(UIImage * _Nullable))closure;
@end


@interface UIImageView (SWIFT_EXTENSION(ImageHelper))
/**
  Loads an image from a URL. If cached, the cached image is returned. Otherwise, a place holder is used until the image from web is returned by the closure.
  <ul>
    <li>
      Returns A new image
    </li>
  </ul>
  \param url The image URL.

  \param placeholder The placeholder image.

  \param fadeIn Weather the mage should fade in.

  \param closure Returns the image from the web the first time is fetched.

*/
- (void)imageFromURL:(NSString * _Nonnull)url placeholder:(UIImage * _Nonnull)placeholder fadeIn:(BOOL)fadeIn shouldCacheImage:(BOOL)shouldCacheImage closure:(void (^ _Nullable)(UIImage * _Nullable))closure;
@end

#pragma clang diagnostic pop
